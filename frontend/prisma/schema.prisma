// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  engineType = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth User model with backend compatibility
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now()) @db.Timestamptz
  updatedAt     DateTime  @updatedAt @db.Timestamptz

  // Additional fields for backend compatibility
  first_name    String?   @db.VarChar(100)
  last_name     String?   @db.VarChar(100)
  password_hash String?   @db.VarChar(255)

  // Relationships
  tasks         Task[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Task {
  id                   String    @id @default(uuid())
  user_id              String
  source_id            String?
  generated_clips_ids  String[]
  status               String    @default("pending") @db.VarChar(20)

  // Font customization fields
  font_family          String?   @default("TikTokSans-Regular") @db.VarChar(100)
  font_size            Int?      @default(24)
  font_color           String?   @default("#FFFFFF") @db.VarChar(7)

  created_at           DateTime  @default(now()) @db.Timestamptz
  updated_at           DateTime  @default(now()) @updatedAt @db.Timestamptz

  // Relationships
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  source               Source?   @relation(fields: [source_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([source_id])
  @@index([created_at])
  @@index([status])
  @@map("tasks")
}

model Source {
  id         String   @id @default(uuid())
  type       String   @db.VarChar(20)
  title      String   @db.VarChar(500)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz

  // Relationships
  tasks      Task[]

  @@index([created_at])
  @@map("sources")
}

// Better Auth Session management
model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
